close all; clear all; clc;
rospath = uigetdir('U:\Falcon_Project\', 'Select Processed ROS bag data');
[csv, path] = uigetfile('U:\Falcon_Project\*.csv', 'Select CSV Flight Record');


%% ROTATOR LOCATION
clear v;
save_figs = 1;
video = 1;
data_freq = 2.427; %Frequency of test data signal in GHz
ref_lat = 32.45159;       % North is positive
ref_lon = -111.21090;     % West is negative
ref_direction = 95;       % 0 is north, 90 is east, 180 is south. This is the direction that the 0 degree azimuth antenna is pointing.
noise_level_test = 45;

t_offset = 5;



%% Load Data
C_Time = load([rospath '\Camera_Time.mat']).Time(:, 2)+6001.5%+1*60*60+1;
C_dir = [rospath '\CameraData'];
C_Frames = dir(C_dir);

L_Time = load([rospath '\Lidar_Time.mat']).Time(:, 2)+6001.5%+1*60*60+1;
L_dir = [rospath '\LidarData'];
L_Frames = dir(L_dir);

R_Time = load([rospath '\radar_Time.mat']).Time(:, 2)+6001.5%+1*60*60+1;
R_dir = [rospath '\radar'];
R_Frames = dir(R_dir);



test_cache = fullfile(path, [num2str(data_freq) 'GHz_cached_test_data.mat']);
load(test_cache, 'Test_Mag', 'Test_Phase', 'Test_Complex', 'num_files', 'numgoodframes');


load([path 'MyTimestamps.mat'])
temp = load([path 'MyTimestamps.mat']);
fn = fieldnames(temp);
antenna_time = temp.(fn{1});
antenna_time = posixtime(antenna_time) + t_offset;
load([path 'AF_ITP_results.mat'])



% angle_offset = rad2deg(atan2(data.y(1), data.x(1)));
angle_offset = mod(90 - ref_direction, 360);
AF_ITP_results(:, 1) = mod(AF_ITP_results(:, 1) + angle_offset +180, 360) - 180;
numPoints = length(R_Time);

startk = 570%1;
endk = 1290%numPoints;



%% Plot Figures
l_pos = [0 0.8 -0.1];
r_pos = [0 0.8 0.06];
l_direction  = -5;
r_direction = -5;


for ifile = 21%:length(AF_ITP_results(:, 1))
    [a, I] = min(abs(antenna_time(ifile) - L_Time));
    L_Frame = load([L_dir '\Frame_' num2str(I) '.mat']);
    [xtemp ytemp] = deal(cosd(l_direction)*L_Frame.X - sind(l_direction)*L_Frame.Y + l_pos(1), sind(l_direction)*L_Frame.X + cosd(l_direction)*L_Frame.Y + l_pos(2));
    L_Frame = [xtemp, ytemp, L_Frame.Z+l_pos(3)];


    % good_idx = find(L_Frame(:, 1)<60);
    % L_Frame = L_Frame(good_idx, :);
    % good_idx = find(abs(L_Frame(:, 2))<30);
    % L_Frame = L_Frame(good_idx, :);
    % good_idx = find(L_Frame(:, 3)>-1);
    % L_Frame = L_Frame(good_idx, :);

    % check if has points above 2m
    drone_det = find(L_Frame(:, 3)>1 & L_Frame(:, 1)>5);
    figure
    subplot(1, 2, 1)
    scatter3(L_Frame(:, 1), L_Frame(:, 2), L_Frame(:, 3))
    hold on
    plot(0:50, tand(AF_ITP_results(ifile, 1)*(0:50)))
    xlim([0 60])
    ylim([-30 30])
    zlim([-1 20])
    view([0 90])
    title('XY')
    subplot(1, 2, 2)
    scatter3(L_Frame(:, 1), L_Frame(:, 2), L_Frame(:, 3))
    hold on
    plot(0:50, tand(AF_ITP_results(ifile, 1))*(0:50))
    view([0 0])
    xlim([0 60])
    ylim([-30 30])
    zlim([-1 20])
    title('XZ')
    set(gcf, 'position', [100 , 100, 1400, 800])
    drone_det = []


    while isempty(drone_det) & a<0.5
        L_Time(I) = [];
        [a, I] = min(abs(antenna_time(ifile) - L_Time));
        L_Frame = load([L_dir '\Frame_' num2str(I) '.mat']);
        [xtemp ytemp] = deal(cosd(l_direction)*L_Frame.X - sind(l_direction)*L_Frame.Y + l_pos(1), sind(l_direction)*L_Frame.X + cosd(l_direction)*L_Frame.Y + l_pos(2));
        L_Frame = [xtemp, ytemp, L_Frame.Z+l_pos(3)];
    
    
        % good_idx = find(L_Frame(:, 1)<60);
        % L_Frame = L_Frame(good_idx, :);
        % good_idx = find(abs(L_Frame(:, 2))<30);
        % L_Frame = L_Frame(good_idx, :);
        % good_idx = find(L_Frame(:, 3)>-1);
        % L_Frame = L_Frame(good_idx, :);
    
        % check if has points above 2m
        drone_det = find(L_Frame(:, 3)>1 & L_Frame(:, 1)>5);



        figure
        subplot(1, 2, 1)
        scatter3(L_Frame(:, 1), L_Frame(:, 2), L_Frame(:, 3))
        hold on
        plot(0:50, tand(AF_ITP_results(ifile, 1)*(0:50)))
        xlim([0 60])
        ylim([-30 30])
        zlim([-1 20])
        view([0 90])
        title('XY')
        subplot(1, 2, 2)
        scatter3(L_Frame(:, 1), L_Frame(:, 2), L_Frame(:, 3))
        hold on
        plot(0:50, tand(AF_ITP_results(ifile, 1)*(0:50)))
        view([0 0])
        xlim([0 60])
        ylim([-30 30])
        zlim([-1 20])
        title('XZ')
        set(gcf, 'position', [100 , 100, 1400, 800])
        drone_det = []
    end
end

%%


% for ifile = 1:length(R_Time)
%     [a, I] = min(abs(R_Time(ifile) - L_Time));
%     if a<1 %Check to see if the Lidar time is close enough to the antenna time for good error.
% 
% 
%         [~, I] = min(abs(L_Time - data.UTC_seconds(k)));
%         L_Frame = load([L_dir '\Frame_' num2str(I) '.mat']);
%         [xtemp ytemp] = deal(cosd(l_direction)*L_Frame.X - sind(l_direction)*L_Frame.Y + l_pos(1), sind(l_direction)*L_Frame.X + cosd(l_direction)*L_Frame.Y + l_pos(2));
%         L_Frame = [xtemp, ytemp, L_Frame.Z+l_pos(3)];
% 
%         R_Frame = load([R_dir '\Frame_' num2str(ifile) '.mat']);
%         [xtemp ytemp] = deal(cosd(r_direction)*R_Frame.X - sind(r_direction)*R_Frame.Y + r_pos(1), sind(r_direction)*R_Frame.X + cosd(r_direction)*R_Frame.Y + r_pos(2));
%         R_Frame = [xtemp, ytemp, R_Frame.Z+r_pos(3), rad2deg(atan2(ytemp,xtemp)), rad2deg(atan2(R_Frame.Z+r_pos(3),sqrt(xtemp.^2 + ytemp.^2)))];
% 
%         good_idx = find(R_Frame(:, 1)<50);
%         R_Frame = R_Frame(good_idx, :);
% 
% 
% 
%         error(ifile, :) = [AF_ITP_results(ifile, 1) - drone_az(I), AF_ITP_results(ifile, 2) - drone_el(I)];
%         drone_loc(ifile, :) = [drone_az(I) drone_el(I) drone_r(I)];
%         drone_rxy(ifile) = sqrt(data.x(I).^2 + data.y(I).^2);
% 
%     else
%         error(ifile, :) = [NaN NaN];
%         drone_loc(ifile, :) = [NaN NaN NaN];
%         drone_rxy(ifile) = NaN;
% 
%     end
% end


figure(10)
subplot(1, 2, 1);
plot(error(:, 1), 'o-')
xlabel('File')
ylabel('Azimuth Error (degrees)')
title('Azimuth Error vs File')
subplot(1, 2, 2)
plot(error(:, 2), 'o-')
xlabel('File')
ylabel('Elevation Error (degrees)')
title('Elevation Error vs File')
set(gcf, 'Position', [100, 100, 1400, 700]);


figure(11)
subplot(1, 2, 1)
plot(data.UTC_seconds - data.UTC_seconds(1), drone_az, 'Color', [0, 0, 0]);
hold on
plot(antenna_time - data.UTC_seconds(1), AF_ITP_results(:, 1), 'o-')
xlabel('Seconds')
ylabel('Azimuth Angle (degrees)')
legend('Drone Ground Truth', 'FALCON DF Results', 'location', 'best')
subplot(1, 2, 2)
plot(data.UTC_seconds - data.UTC_seconds(1), drone_el, 'Color', [0, 0, 0]);
hold on
plot(antenna_time - data.UTC_seconds(1), AF_ITP_results(:, 2), 'o-')
xlabel('Seconds')
ylabel('Elevation Angle (degrees)')
legend('Drone Ground Truth', 'FALCON DF Results', 'location', 'best')
set(gcf, 'Position', [100, 100, 1400, 700]);


figure(12)
sgtitle(['6 Antenna SNR (Noise Level = ' num2str(noise_level_test) ' dB)'])
for i = 1:6
    subplot(2, 3, i)
    scatter(drone_loc(:, 3), Test_Mag(i, :)-noise_level_test)

    [~, sorted_idx] = sort(drone_loc(:, 3));
    drone_distance_sort = drone_loc(sorted_idx, 3);
    SNR = (Test_Mag(i, :)-noise_level_test)';
    SNR_sorted = SNR(sorted_idx);

    hold on
    X = 1 ./ drone_distance_sort;        % compute 1/r
    Y = SNR_sorted;
    validIdx = ~isnan(X) & ~isnan(Y) & ~isinf(X) & ~isinf(Y);
    X = X(validIdx);
    Y = Y(validIdx);


    p = polyfit(X, Y, 1);
    Y_fit = polyval(p, X);

    % Compute R^2
    SS_res = sum((Y - Y_fit).^2);         % Residual sum of squares
    SS_tot = sum((Y - mean(Y)).^2);       % Total sum of squares
    R_squared = 1 - (SS_res / SS_tot);

    plot(1./X, Y_fit)
    eqnStr = sprintf('Fit: P = %.2f / r + %.3f', p(1), p(2));
    rsquare = sprintf(['R^{2} = ' num2str(R_squared)]);
    plot(NaN, NaN, 'w')
    plot(NaN, NaN, 'w')

    ylabel('Power')
    xlabel('Distance (m)')
    ylim([0 2.5*10^4])
    title(['Antenna ' num2str(i)])
    grid on
    legend('Raw Data', '1/r Fit', eqnStr, rsquare, 'Location', 'best')


    ylabel('SNR (dB)')
    xlabel('Distance (m)')
    ylim([0 55])
    title(['Antenna ' num2str(i)])
    grid on
end
set(gcf, 'Position', [100, 100, 1400, 700]);

figure(13)
sgtitle('6 Antenna Power Level')
for i = 1:6
    subplot(2, 3, i)
    scatter(drone_loc(:, 3), 10.^(Test_Mag(i, :)/20))

    [~, sorted_idx] = sort(drone_loc(:, 3));
    drone_distance_sort = drone_loc(sorted_idx, 3);
    mag_sorted = 10.^(Test_Mag(i, sorted_idx)/20)';

    hold on
    X = 1 ./ drone_distance_sort.^2;        % compute 1/r^2
    Y = mag_sorted;
    validIdx = ~isnan(X) & ~isnan(Y) & ~isinf(X) & ~isinf(Y);
    X = X(validIdx);
    Y = Y(validIdx);


    p = polyfit(X, Y, 1);
    Y_fit = polyval(p, X);

    % Compute R^2
    SS_res = sum((Y - Y_fit).^2);         % Residual sum of squares
    SS_tot = sum((Y - mean(Y)).^2);       % Total sum of squares
    R_squared = 1 - (SS_res / SS_tot);

    plot(sqrt(1./X), Y_fit)
    eqnStr = sprintf('Fit: P = %.2f / r^{2} + %.3f', p(1), p(2));
    rsquare = sprintf(['R^{2} = ' num2str(R_squared)]);
    plot(NaN, NaN, 'w')
    plot(NaN, NaN, 'w')
    ylabel('Power')
    xlabel('Distance (m)')
    ylim([0 2.5*10^4])
    title(['Antenna ' num2str(i)])
    grid on
    legend('Raw Data', '1/r^{2} Fit', eqnStr, rsquare, 'Location', 'best')
end
set(gcf, 'Position', [100, 100, 1400, 700]);



figure(14)
sgtitle('Error vs Distance')
subplot(1, 2, 1)
scatter(drone_loc(:, 3), abs(error(:, 1)))
xlabel('Distance (m)')
ylabel('Absolute Azimuth Error (degrees)')
grid on
subplot(1, 2, 2)
scatter(drone_loc(:, 3), abs(error(:, 2)))
xlabel('Distance (m)')
ylabel('Absolute Elevation Error (degrees)')
grid on
set(gcf, 'Position', [100, 100, 1400, 700]);

figure(15)
sgtitle('Error vs Ground Truth')
subplot(1, 2, 1)
scatter(drone_loc(:, 1), error(:, 1))
xlabel('Ground Truth Drone Azimuth (degrees)')
ylabel('Azimuth Error (DF - GT) (degrees)')
xlim([-180 180])
grid on
subplot(1, 2, 2)
scatter(drone_loc(:, 2), error(:, 2))
xlabel('Ground Truth Drone Elevation (degrees)')
ylabel('Elevation Error (DF - GT) (degrees)')
xlim([0 90])
grid on
set(gcf, 'Position', [100, 100, 1400, 700]);


figure(16)
scatter(drone_rxy'.*cosd(AF_ITP_results(:, 1)), drone_rxy'.*sind(AF_ITP_results(:, 1)), 'filled')
hold on
for i = 1:num_files - 1
    x1 = drone_rxy(i)'*cosd(AF_ITP_results(i, 1));
    y1 = drone_rxy(i)'*sind(AF_ITP_results(i, 1));
    x2 = drone_rxy(i+1)'*cosd(AF_ITP_results(i+1, 1));
    y2 = drone_rxy(i+1)'*sind(AF_ITP_results(i+1, 1));
    line([x1 x2], [y1 y2], 'Color', [1 0 0 0.3], 'LineWidth', 1);  % Simulated transparency
    vec = [x2 - x1, y2 - y1];
    vec = vec / norm(vec);  % Normalize
    perp = [-vec(2), vec(1)];  % Perpendicular
    L = 0.4;  % Length of arrowhead
    W = 0.2;  % Width of arrowhead
    base = [x2, y2] - L * vec;
    arrow_x = [x2, base(1) + W*perp(1), base(1) - W*perp(1)];
    arrow_y = [y2, base(2) + W*perp(2), base(2) - W*perp(2)];
    patch(arrow_x, arrow_y, 'r', 'EdgeColor', 'none', 'FaceAlpha', 0.3);
end
for i = 1:num_files
    text(drone_rxy(i)'*cosd(AF_ITP_results(i, 1)), drone_rxy(i)'*sind(AF_ITP_results(i, 1)), num2str(i), ...
        'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right', 'FontSize', 8)
end
xlabel('X (m)')
ylabel('Y (m)')
title('Signal Path')
grid on
set(gcf, 'Position', [100, 100, 1400, 700]);





figure(17)
scatter(data.x(startk:10:endk), data.y(startk:10:endk))
hold on
for i = startk:10:endk - 10
    x1 = data.x(i);
    y1 = data.y(i);
    x2 = data.x(i+10);
    y2 = data.y(i+10);
    line([x1 x2], [y1 y2], 'Color', [1 0 0 0.3], 'LineWidth', 1);  % Simulated transparency
    vec = [x2 - x1, y2 - y1];
    vec = vec / norm(vec);  % Normalize
    perp = [-vec(2), vec(1)];  % Perpendicular
    L = 0.4;  % Length of arrowhead
    W = 0.2;  % Width of arrowhead
    base = [x2, y2] - L * vec;
    arrow_x = [x2, base(1) + W*perp(1), base(1) - W*perp(1)];
    arrow_y = [y2, base(2) + W*perp(2), base(2) - W*perp(2)];
    patch(arrow_x, arrow_y, 'r', 'EdgeColor', 'none', 'FaceAlpha', 0.3);
end
% for i = 1:num_files
%     text(drone_rxy(i)'*cosd(AF_ITP_results(i, 1)), drone_rxy(i)'*sind(AF_ITP_results(i, 1)), num2str(i), ...
%         'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right', 'FontSize', 8)
% end
xlabel('X (m)')
ylabel('Y (m)')
title('Drone Path')
grid on
set(gcf, 'Position', [100, 100, 1400, 700]);


%% Save Figures
if save_figs
    folderName = [num2str(data_freq*1000),'_MHz'];
    path = fullfile(path, folderName);
    
    if ~exist(path, 'dir')
        mkdir(path);
    else
        fprintf('Folder "%s" already exists.\n', folderName);
    end
    saveas(figure(10), fullfile(path, 'Error.jpeg'));
    saveas(figure(11), fullfile(path, 'Full_Flight.jpeg'));
    saveas(figure(12), fullfile(path, 'SNR.jpeg'));
    saveas(figure(13), fullfile(path, 'Power.jpeg'));
    saveas(figure(14), fullfile(path, 'Error_vs_Distance.jpeg'));
    saveas(figure(15), fullfile(path, 'Error_vs_GT.jpeg'));
    saveas(figure(17), fullfile(path, 'Path.jpeg'));


end

